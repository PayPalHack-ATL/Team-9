exports.id = 0;
exports.modules = {

/***/ "./src/backend/models/plugins/authorPlugin.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"]) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}};}();var _mongoose = __webpack_require__(\"mongoose\");var _mongoose2 = _interopRequireDefault(_mongoose);\nvar _error = __webpack_require__(\"./src/backend/common/error.js\");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}var\n\nSchema = _mongoose2.default.Schema;var\nObjectId = Schema.Types.ObjectId;\n\nvar merge = function merge() {for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n  var permissions = {};var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {\n    for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var arg = _step.value;\n      var keys = Object.keys(arg || {});var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {\n        for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var key = _step2.value;\n          if (permissions[key] === true) continue;\n          if (arg[key] === true) permissions[key] = true;else\n          {var _permissions$key;\n            if (!permissions[key]) permissions[key] = [];\n            (_permissions$key = permissions[key]).push.apply(_permissions$key, _toConsumableArray(arg[key]));\n          }\n        }} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2.return) {_iterator2.return();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}\n    }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}\n  return permissions;\n};\n\nvar getMatch = function getMatch() {var permissions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return [\n  [permissions.none, function (author) {return false;}],\n  [permissions.user, function (author) {return author.isUser();}],\n  [permissions.owner, function (author, doc) {return author.isOwner(doc);}],\n  [permissions.self, function (author, doc) {return author.isSelf(doc);}],\n  [permissions.guest, function (author) {return true;}]];\n\n};\n\nvar check = function check(match, author, doc, process) {var _iteratorNormalCompletion3 = true;var _didIteratorError3 = false;var _iteratorError3 = undefined;try {\n    for (var _iterator3 = match[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {var _step3$value = _slicedToArray(_step3.value, 2),fields = _step3$value[0],func = _step3$value[1];\n      if (fields === undefined) continue;\n      var permitted = func(author, doc);\n      if (!permitted) {\n        if (fields === true) throw new _error.PermissionError();\n        if (process) {\n          fields.forEach(process);\n        }\n      }\n    }} catch (err) {_didIteratorError3 = true;_iteratorError3 = err;} finally {try {if (!_iteratorNormalCompletion3 && _iterator3.return) {_iterator3.return();}} finally {if (_didIteratorError3) {throw _iteratorError3;}}}\n};\n\nvar processSet = function processSet(schema, options) {\n  var insertMatch = getMatch(merge(options.set, options.insert));\n  var modifyMatch = getMatch(merge(options.set, options.modify));\n  schema.pre('save', function (next) {\n    var doc = this;\n    if (doc._author === true) return next();\n    if (options.authorField) {\n      if (doc.isModified('author')) return next(new _error.PermissionError());\n      doc.author = doc._author;\n    }\n    try {\n      check(doc.isNew ? insertMatch : modifyMatch, doc._author, doc, function (field) {\n        if (doc.isModified(field)) throw new _error.PermissionError();\n      });\n      next();\n    } catch (err) {\n      next(err);\n    }\n  });\n};\n\nvar processGet = function processGet(schema, options) {\n  var match = getMatch(options.get);\n  var _toJSON = schema.options.toJSON;\n  schema.options.toJSON = {\n    transform: function transform(doc, ret, options) {\n      if (_toJSON && _toJSON.transform) {\n        ret = _toJSON.transform(doc, ret, options);\n      }\n      check(match, options.req.author, doc, function (field) {\n        delete ret[field];\n      });\n      return ret;\n    } };\n\n};\n\nvar processRemove = function processRemove(schema, options) {\n  var match = getMatch(options.remove);\n  schema.pre('remove', function (next) {\n    var doc = this;\n    if (doc._author === true) return next();\n    if (options.authorField) {\n      if (doc.isModified('author')) return next(new _error.PermissionError());\n      doc.author = doc._author;\n    }\n    try {\n      check(match, doc.author, doc);\n      next();\n    } catch (err) {\n      next(err);\n    }\n  });\n};\n\nvar authorPlugin = function authorPlugin(schema, options) {\n  options = _extends({\n    authorField: false,\n    set: {},\n    insert: {},\n    modify: {},\n    get: {},\n    remove: {} },\n  options);\n\n\n  schema.methods.setAuthor = function (author) {\n    this._author = author;\n    return this;\n  };\n\n  schema.methods.force = function () {\n    this._author = true;\n    return this;\n  };\n\n  processSet(schema, options);\n  processGet(schema, options);\n  processRemove(schema, options);\n};exports.default =\n\nauthorPlugin;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/backend/models/plugins/authorPlugin.js\n");

/***/ })

};